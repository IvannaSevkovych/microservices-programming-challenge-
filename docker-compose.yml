version: '3'
services:
  user-management:
    build:
      context: ./user-management
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      - postgres-db-user-management
  product-catalog:
    build:
      context: ./product-catalog
      dockerfile: Dockerfile
    ports:
      - "8091:3000"
    depends_on:
      - mongo-db
  order:
    build:
      context: ./order
      dockerfile: Dockerfile
    ports:
      - "8092:5000"
    depends_on:
      - postgres-db-order

  # TODO adjust volumesw to new structure. See postgres-db-order
  postgres-db-user-management:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5431:5432'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./volumes/postgres-data:/var/lib/postgresql/data

  postgres-db-order:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5430:5432'
    volumes:
      - ./order/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./order/db/:/var/lib/postgresql/data

  # TODO adjust volumesw to new structure. See postgres-db-order
  mongo-db:
    image: mongo
    ports:
      - '27017:27017'
    volumes:
      - ./volumes/mongo-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
