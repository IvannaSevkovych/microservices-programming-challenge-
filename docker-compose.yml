version: '3'
services:
  user-management:
    build:
      context: ./user-management
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      - postgres-db-user-management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  product-catalog:
    build:
      context: ./product-catalog
      dockerfile: Dockerfile
    ports:
      - "8091:3000"
    depends_on:
      - mongo-db
    # TODO find out why showed as unhealthy in docker ps and at the same time in terminal and postman OK
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  order:
    build:
      context: ./order
      dockerfile: Dockerfile
    ports:
      - "8092:5000"
    depends_on:
      - postgres-db-order
      - rabbit-mq
      - shipping # just for testing-to make sure consuming starts before sending
    restart: always
    # TODO find out why is container exits all the time
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  shipping:
    build:
      context: ./shipping
      dockerfile: Dockerfile
    ports:
      - "8093:8093"
    depends_on:
      - rabbit-mq
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # TODO adjust volumesw to new structure. See postgres-db-order
  postgres-db-user-management:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5431:5432'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./volumes/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-db-order:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5430:5432'
    volumes:
      - ./order/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./order/db/:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TODO adjust volumesw to new structure. See postgres-db-order
  mongo-db:
    image: mongo:7.0.0-rc2
    ports:
      - '27017:27017'
    volumes:
      - ./volumes/mongo-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 3

  rabbit-mq:
    image: rabbitmq:3.11.18
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
